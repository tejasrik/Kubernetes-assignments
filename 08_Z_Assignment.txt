Learning Objectives:-
Create a ConfigMap called `candy-service-config` to store the container's configuration data.
Create a Kubernetes secret called `db-password` to store the database password.
Create the pod for the candy-service application according to the provided specification.

Problem Statement:-
Your company is nearing completion of their new mobile app, a candy-themed game. This application has some backend infrastructure the company plans to run using Kubernetes. They want to begin deploying one of their backend services to the cluster and have asked you to create a pod definition that meets the specifications required by the software. Create a pod definition in /home/cloud_user/candy-service-pod.yml, and then create a pod in the cluster using this definition to make sure it works.

The specifications are as follows:

The current image for the container is linuxacademycontent/candy-service:1. You do not need a custom command or args.
There is some configuration data the container will need:

candy.peppermint.power=100000000
candy.nougat-armor.strength=10

It will expect to find this data in a file at /etc/candy-service/candy.cfg. Store the configuration data in a ConfigMap called candy-service-config and provide it to the container as a mounted volume.
The container will need to run with the file system group with the id 2000. You will need to set this using the securityContext.
The container should expect to use 64MiB of memory and 250m CPU (use resource requests).
The container should be limited to 128MiB of memory and 500m CPU (use resource limits).
The container needs access to a database password in order to authenticate with a backend database server. The password is Kub3rn3t3sRul3s!. It should be stored in a secure fashion (as a Kubernetes secret called db-password) and passed to the container as an environment variable called DB_PASSWORD.

Good luck!
****************************************************8888
C:\Users\HP$ kubectl create -f secret.yml
secret/db-password created

secret.yml
apiVersion: v1
kind: Secret
metadata:
  name: db-password
type: Opaque
stringData:
  password: Kub3rn3t3sRul3s!

C:\Users\HP$ nano config.yml
C:\Users\HP$ kubectl create -f config.yml
configmap/candy-service-config created

config.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: candy-service-config
data:
  config:
    candy.peppermint.power=100000000
    candy.nougat-armor.strength=10


C:\Users\HP$ kubectl create -f pod.yml
pod/candy-service-pod created

pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: candy-service-pod
spec:
  containers:
   - name: candy-ctr
     image: linuxacademycontent/candy-service:1
     env:
      - name: DB_PASSWORD
        valueFrom:
         secretKeyRef:
          name: db-password
          key: password
     resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        cpu: "500m"
        memory: "128Mi"
     volumeMounts:
       - mountPath: /etc/candy-service/candy.cfg
         name: config-vol
  volumes:
   - name: config-vol
     configMap:
       name: candy-service-config

 C:\Users\HP$kubectl get pods
NAME                READY   STATUS              RESTARTS   AGE
candy-service-pod   0/1     ContainerCreating   0          9s

C:\Users\HP$ kubectl describe pod candy-service-pod
Name:         candy-service-pod
Namespace:    default
Priority:     0
Node:         minikube/192.168.99.100
Start Time:   Fri, 19 Jun 2020 11:50:08 +0130
Labels:       <none>
Annotations:  <none>
Status:       Running
IP:           172.18.0.6
IPs:
  IP:  172.18.0.6
Containers:
  candy-ctr:
    Container ID:   docker://825803e3b21da90fa74fea41feb50662e3d66da80df911da321ce20099a03d07
    Image:          linuxacademycontent/candy-service:1
    Image ID:       docker-pullable://linuxacademycontent/candy-service@sha256:eda64284ca388e265e54010d3000380e15d7c4df67e38ca3ec44d81f8402fa4e
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Sat, 20 Jun 2020 20:58:08 +0530
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     500m
      memory:  128Mi
    Requests:
      cpu:     250m
      memory:  64Mi
    Environment:
      DB_PASSWORD:  <set to the key 'password' in secret 'db-password'>  Optional: false
    Mounts:
      /etc/candy-service/candy.cfg from config-vol (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-pjlnr (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  config-vol:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      candy-service-config
    Optional:  false
  default-token-pjlnr:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-pjlnr
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  39s   default-scheduler  Successfully assigned default/candy-service-pod to minikube
  Normal  Pulling    37s   kubelet, minikube  Pulling image "linuxacademycontent/candy-service:1"
  Normal  Pulled     24s   kubelet, minikube  Successfully pulled image "linuxacademycontent/candy-service:1"
  Normal  Created    24s   kubelet, minikube  Created container candy-ctr
